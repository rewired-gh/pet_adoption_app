// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: category.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createCategory = `-- name: CreateCategory :exec
insert into category (
    species,
    color,
    gender
) values (
    ?, ?, ?
)
`

type CreateCategoryParams struct {
	Species string         `json:"species"`
	Color   sql.NullString `json:"color"`
	Gender  sql.NullString `json:"gender"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) error {
	_, err := q.db.ExecContext(ctx, createCategory, arg.Species, arg.Color, arg.Gender)
	return err
}

const getCategoryID = `-- name: GetCategoryID :one
select category_id
from category
where species = ?
and color <=> ?
and gender <=> ?
limit 1
`

type GetCategoryIDParams struct {
	Species string         `json:"species"`
	Color   sql.NullString `json:"color"`
	Gender  sql.NullString `json:"gender"`
}

func (q *Queries) GetCategoryID(ctx context.Context, arg GetCategoryIDParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, getCategoryID, arg.Species, arg.Color, arg.Gender)
	var category_id int32
	err := row.Scan(&category_id)
	return category_id, err
}
