// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package sqlc

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :exec
insert into ` + "`" + `user` + "`" + ` (
    location_id,
    username,
    pword,
    gender,
    birthday
) values (
    ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	LocationID int32     `json:"location_id"`
	Username   string    `json:"username"`
	Pword      string    `json:"pword"`
	Gender     string    `json:"gender"`
	Birthday   time.Time `json:"birthday"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.LocationID,
		arg.Username,
		arg.Pword,
		arg.Gender,
		arg.Birthday,
	)
	return err
}

const getUser = `-- name: GetUser :one
select uid, location_id, username, pword, gender, birthday from ` + "`" + `user` + "`" + `
where username = ? and pword = ?
limit 1
`

type GetUserParams struct {
	Username string `json:"username"`
	Pword    string `json:"pword"`
}

func (q *Queries) GetUser(ctx context.Context, arg GetUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, arg.Username, arg.Pword)
	var i User
	err := row.Scan(
		&i.Uid,
		&i.LocationID,
		&i.Username,
		&i.Pword,
		&i.Gender,
		&i.Birthday,
	)
	return i, err
}
