// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const addContact = `-- name: AddContact :exec
insert into ` + "`" + `contact` + "`" + ` (
    ` + "`" + `uid` + "`" + `,
    kind,
    content
) values (
    ?, ?, ?
)
`

type AddContactParams struct {
	Uid     int32  `json:"uid"`
	Kind    string `json:"kind"`
	Content string `json:"content"`
}

func (q *Queries) AddContact(ctx context.Context, arg AddContactParams) error {
	_, err := q.db.ExecContext(ctx, addContact, arg.Uid, arg.Kind, arg.Content)
	return err
}

const authUser = `-- name: AuthUser :one
select ` + "`" + `uid` + "`" + ` from ` + "`" + `user` + "`" + `
where username = ? and pword = ?
limit 1
`

type AuthUserParams struct {
	Username string `json:"username"`
	Pword    string `json:"pword"`
}

func (q *Queries) AuthUser(ctx context.Context, arg AuthUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, authUser, arg.Username, arg.Pword)
	var uid int32
	err := row.Scan(&uid)
	return uid, err
}

const createUser = `-- name: CreateUser :exec
insert into ` + "`" + `user` + "`" + ` (
    location_id,
    username,
    pword,
    gender,
    birthday
) values (
    ?, ?, ?, ?, ?
)
`

type CreateUserParams struct {
	LocationID int32     `json:"location_id"`
	Username   string    `json:"username"`
	Pword      string    `json:"pword"`
	Gender     string    `json:"gender"`
	Birthday   time.Time `json:"birthday"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.LocationID,
		arg.Username,
		arg.Pword,
		arg.Gender,
		arg.Birthday,
	)
	return err
}

const getRoles = `-- name: GetRoles :many
select distinct ` + "`" + `role` + "`" + `.rolename from ` + "`" + `user_role` + "`" + `
join ` + "`" + `role` + "`" + ` on ` + "`" + `role` + "`" + `.role_id = user_role.role_id
where user_role.` + "`" + `uid` + "`" + ` = ?
`

func (q *Queries) GetRoles(ctx context.Context, uid int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getRoles, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var rolename string
		if err := rows.Scan(&rolename); err != nil {
			return nil, err
		}
		items = append(items, rolename)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
select username, gender, birthday, province, city, district
from ` + "`" + `user` + "`" + `
join ` + "`" + `location` + "`" + ` on ` + "`" + `user` + "`" + `.location_id = ` + "`" + `location` + "`" + `.location_id
where ` + "`" + `user` + "`" + `.` + "`" + `uid` + "`" + ` = ?
limit 1
`

type GetUserRow struct {
	Username string         `json:"username"`
	Gender   string         `json:"gender"`
	Birthday time.Time      `json:"birthday"`
	Province string         `json:"province"`
	City     sql.NullString `json:"city"`
	District string         `json:"district"`
}

func (q *Queries) GetUser(ctx context.Context, uid int32) (GetUserRow, error) {
	row := q.db.QueryRowContext(ctx, getUser, uid)
	var i GetUserRow
	err := row.Scan(
		&i.Username,
		&i.Gender,
		&i.Birthday,
		&i.Province,
		&i.City,
		&i.District,
	)
	return i, err
}
