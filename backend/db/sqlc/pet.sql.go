// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: pet.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"
)

const createPet = `-- name: CreatePet :exec
insert into pet (
    nickname,
    ` + "`" + `uid` + "`" + `,
    category_id,
    ` + "`" + `description` + "`" + `,
    birthday,
    is_adopted,
    publish_date
) values (
    ?, ?, ?, ?, ?, false, now()
)
`

type CreatePetParams struct {
	Nickname    string       `json:"nickname"`
	Uid         int32        `json:"uid"`
	CategoryID  int32        `json:"category_id"`
	Description string       `json:"description"`
	Birthday    sql.NullTime `json:"birthday"`
}

func (q *Queries) CreatePet(ctx context.Context, arg CreatePetParams) error {
	_, err := q.db.ExecContext(ctx, createPet,
		arg.Nickname,
		arg.Uid,
		arg.CategoryID,
		arg.Description,
		arg.Birthday,
	)
	return err
}

const deletePet = `-- name: DeletePet :exec
delete from pet
where pet_id = ?
`

func (q *Queries) DeletePet(ctx context.Context, petID int32) error {
	_, err := q.db.ExecContext(ctx, deletePet, petID)
	return err
}

const listAvailablePet = `-- name: ListAvailablePet :many
select pet.pet_id, pet.uid, pet.category_id, pet.nickname, pet.birthday, pet.is_adopted, pet.description, pet.publish_date, category.species, category.color, category.gender
from pet
join category on pet.category_id = category.category_id
left join adoption on pet.pet_id = adoption.pet_id and adoption.uid = ?
where adoption.uid is null
`

type ListAvailablePetRow struct {
	PetID       int32          `json:"pet_id"`
	Uid         int32          `json:"uid"`
	CategoryID  int32          `json:"category_id"`
	Nickname    string         `json:"nickname"`
	Birthday    sql.NullTime   `json:"birthday"`
	IsAdopted   bool           `json:"is_adopted"`
	Description string         `json:"description"`
	PublishDate time.Time      `json:"publish_date"`
	Species     string         `json:"species"`
	Color       sql.NullString `json:"color"`
	Gender      sql.NullString `json:"gender"`
}

func (q *Queries) ListAvailablePet(ctx context.Context, uid int32) ([]ListAvailablePetRow, error) {
	rows, err := q.db.QueryContext(ctx, listAvailablePet, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAvailablePetRow{}
	for rows.Next() {
		var i ListAvailablePetRow
		if err := rows.Scan(
			&i.PetID,
			&i.Uid,
			&i.CategoryID,
			&i.Nickname,
			&i.Birthday,
			&i.IsAdopted,
			&i.Description,
			&i.PublishDate,
			&i.Species,
			&i.Color,
			&i.Gender,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPet = `-- name: ListPet :many
select pet.pet_id, pet.uid, pet.category_id, pet.nickname, pet.birthday, pet.is_adopted, pet.description, pet.publish_date, category.species, category.color, category.gender
from pet
join category on pet.category_id = category.category_id
`

type ListPetRow struct {
	PetID       int32          `json:"pet_id"`
	Uid         int32          `json:"uid"`
	CategoryID  int32          `json:"category_id"`
	Nickname    string         `json:"nickname"`
	Birthday    sql.NullTime   `json:"birthday"`
	IsAdopted   bool           `json:"is_adopted"`
	Description string         `json:"description"`
	PublishDate time.Time      `json:"publish_date"`
	Species     string         `json:"species"`
	Color       sql.NullString `json:"color"`
	Gender      sql.NullString `json:"gender"`
}

func (q *Queries) ListPet(ctx context.Context) ([]ListPetRow, error) {
	rows, err := q.db.QueryContext(ctx, listPet)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListPetRow{}
	for rows.Next() {
		var i ListPetRow
		if err := rows.Scan(
			&i.PetID,
			&i.Uid,
			&i.CategoryID,
			&i.Nickname,
			&i.Birthday,
			&i.IsAdopted,
			&i.Description,
			&i.PublishDate,
			&i.Species,
			&i.Color,
			&i.Gender,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePet = `-- name: UpdatePet :exec
update pet
set
    nickname = ?,
    category_id = ?,
    ` + "`" + `description` + "`" + ` = ?,
    birthday = ?
where pet_id = ?
`

type UpdatePetParams struct {
	Nickname    string       `json:"nickname"`
	CategoryID  int32        `json:"category_id"`
	Description string       `json:"description"`
	Birthday    sql.NullTime `json:"birthday"`
	PetID       int32        `json:"pet_id"`
}

func (q *Queries) UpdatePet(ctx context.Context, arg UpdatePetParams) error {
	_, err := q.db.ExecContext(ctx, updatePet,
		arg.Nickname,
		arg.CategoryID,
		arg.Description,
		arg.Birthday,
		arg.PetID,
	)
	return err
}
